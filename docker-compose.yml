version: "3.9"

services:
  # nginx:
  #   restart: always
  #   build:
  #       context: ./nginx
  #   ports:
  #     - "80:80" # port exposed to outside world.
  #     - "443:443" # <--- add this line
  #   command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  #   volumes:
  #     - ./persistentdata/certbot/conf:/etc/letsencrypt # <--here
  #     - ./persistentdata/certbot/www:/var/www/certbot
  #     - ./persistentdata/static:/var/www/static
  #     - ./persistentdata/media:/var/www/media
  redis:
    image: redis
    restart: always
    


  # django-backend:
  #   restart: always
  #   build:
  #     context: ./django-backend
  #   image: djangobackend
  #   volumes:
  #     - ./persistentdata/static:/var/www/static # <--here
  #     - ./persistentdata/media:/var/www/media # <--here
  #     - ./persistentdata/db/sqlite:/
  django-backend:
    restart: always
    build:
      context: ./django-backend
    ports:
      - "8000:8000"
    volumes:
      - ./persistentdata/settings:/django-backend/src/settings
    image: djangobackend
    depends_on:
      - postgresql-db
      - redis


  celeryworker:
    restart: always
    build: 
      context: ./django-backend
      dockerfile: Dockerfile.torch-cpu
    volumes:
      - ./persistentdata/huggingface_cache:/django-backend/src/huggingface_cache
    env_file:
    - ./persistentdata/settings/.env
    command: ['celery', '--workdir=./src',  '-A', 'proj', 'worker' ]
    image: celeryworker
    depends_on:
      - postgresql-db
      - redis


  celery-beats:
    restart: always
    build: 
      context: ./django-backend
    command: ['celery', '--workdir=./src', '-A', 'proj', 'beat', '-l', 'INFO', '--scheduler', 'django_celery_beat.schedulers:DatabaseScheduler']
    depends_on:
      - postgresql-db
      - redis
    env_file:
      - ./persistentdata/settings/.env # why - see the next step


  postgresql-db:
    restart: always
    image: postgres
    volumes:
            - ./persistentdata/db/postgresql:/var/lib/postgresql/data
    env_file:
      - ./persistentdata/settings/.pg-env # why - see the next step
  # certbot:
  #   image: certbot/certbot
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  #   volumes:
  #     - ./persistentdata/certbot/conf:/etc/letsencrypt # <--here
  #     - ./persistentdata/certbot/www:/var/www/certbot